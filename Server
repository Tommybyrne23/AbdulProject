{
    // Port number for server communication
    private static final int PORT = 12345;
    // Data structure to store class schedules
    private static HashMap<String, ArrayList<String>> classSchedule = new HashMap<>();

    private static HashMap<String, ArrayList<String>> moduleSchedule = new HashMap<>();

    private static ArrayList<String> module_Schedule = new ArrayList<>();
    /**
     * Main method to start the server application.
     * It listens for client connections and handles them in separate threads.
     */
    public static void main(String[] args) {
        try {
            ServerSocket serverSocket = new ServerSocket(PORT);
            System.out.println("Server started. Waiting for clients...");

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("Client connected: " + clientSocket);

                // Handle client connection in a separate thread
                Thread clientThread = new Thread(new ClientHandler(clientSocket));
                clientThread.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * ClientHandler class represents a thread that handles communication with a single client.
     * It receives messages from the client, processes them, and sends back responses.
     */
    private static class ClientHandler implements Runnable {
        private Socket clientSocket;

        /**
         * Constructor to initialize a ClientHandler with a client socket.
         * @param clientSocket The socket representing the client connection.
         */
        public ClientHandler(Socket clientSocket) {
            this.clientSocket = clientSocket;
        }

        /**
         * Run method to handle communication with the client.
         * It receives messages from the client, processes them, and sends back responses.
         */
        @Override
        public void run() {
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true);

                String clientMessage;
                while ((clientMessage = reader.readLine()) != null) {
                    try {
                        // Process client request
                        String[] parts = clientMessage.split(":");
                        if (parts.length != 5) {
                            throw new IncorrectActionException("Incorrect action format1");
                        }
                        String action = parts[0];
                        String className = parts[1];
                        String moduleCode = parts[2];
                        String dateTime = parts[3];
                        String roomNumber = parts[4];

                        switch (action) {
                            case "ADD CLASS":
                                if(className == null || moduleCode == null){
                                    throw new IncorrectActionException("Incorrect action format2");
                                }
                                addClass(className, moduleCode, writer);
                                break;
                            case "ADD MODULE":
                                addModule(moduleCode, dateTime, roomNumber, writer);
                                break;
                            case "REMOVE CLASS":
                                if(className == "" || moduleCode == "") {
                                    throw new IncorrectActionException("Incorrect action format3");
                                }
                                removeClass(className, writer);
                                break;
                            case "REMOVE MODULE":
                                removeModule(moduleCode, writer);
                                break;
                            case "DISPLAY":
                                displaySchedule(moduleCode);
                                break;
                            case "STOP":
                                writer.println("TERMINATE");
                                closeConnection(reader, writer, clientSocket);
                                return;

                            default:
                                throw new IncorrectActionException("Invalid action.");
                        }
                    } catch (IncorrectActionException ex) {
                        writer.println("Error: " + ex.getMessage());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }


        /**
         * Method to add a class to the schedule.
         * It checks for clashes and notifies the client accordingly.
         * @param moduleCode The name of a module code in the class.
         * @param dateTime The date and time of the class.
         * @param roomNumber The room number for the class.
         * @param writer PrintWriter to send responses to the client.
         */
        private void addModule(String moduleCode, String dateTime, String roomNumber, PrintWriter writer) {
            // Check if the room is already booked at the specified time
            boolean roomBooked = false;
            for (ArrayList<String> module_Schedule : moduleSchedule.values()) {
                for (String slot : module_Schedule) {
                    if (slot.contains("Time: " + dateTime + " - Room: " + roomNumber)) {
                        roomBooked = true;
                        break;
                    }
                }
            }


            // Add the class if the room is not already booked
            if (!roomBooked) {
                if (moduleSchedule.containsKey(moduleCode)) {
                    writer.println("Error: Module already scheduled.");
                } else {
                    module_Schedule.add("Module: " + moduleCode + " - Time: " + dateTime + " - Room: " + roomNumber);
                    moduleSchedule.put(moduleCode, module_Schedule);
                    writer.println("Success: Module " + moduleCode + " has been scheduled for " + dateTime + " in room " + roomNumber);
                }
            } else {
                writer.println("Error: Room " + roomNumber + " is already booked at the specified time.");
            }
        }

        private void addClass(String className, String moduleCode, PrintWriter writer) throws IncorrectActionException {
            if (!classSchedule.containsKey(className)) {
                classSchedule.put(className, new ArrayList<>());
            }

            ArrayList<String> classModules = classSchedule.get(className);

            if (classModules.size() >= 5) {
                throw new IncorrectActionException("Maximum number of modules reached for class " + className);
            }

            if (classModules.contains(moduleCode)) {
                throw new IncorrectActionException("Module " + moduleCode + " already added to class " + className);
            }

            classModules.add(moduleCode);
            writer.println("Success: Module " + moduleCode + " has been added to class " + className);
        }


        /**
         * Method to remove a class from the schedule.
         * It removes the class record from the data structure and notifies the client.
         * @param className The name of the class to be removed.
         * @param writer PrintWriter to send responses to the client.
         */
        private void removeClass (String className, PrintWriter writer){
            if (classSchedule.containsKey(className)) {
                classSchedule.remove(className);
                writer.println("Success: " + className + " has been removed from the system.");
            } else {
                writer.println("Error: " + className + " not found.");
            }
        }


        private void removeModule(String moduleCode, PrintWriter writer) {
            if (moduleSchedule.containsKey(moduleCode)) {
                ArrayList<String> module_Schedule = moduleSchedule.get(moduleCode);
                moduleSchedule.remove(moduleCode);
                writer.println("Success: Module removed. New available time slot: " + module_Schedule);
            } else {
                writer.println("Error: Module not found.");
            }
        }


        private void displaySchedule(String moduleCode) {
            if (moduleSchedule.containsKey(moduleCode)) {
                List<String> classModules = moduleSchedule.get(moduleCode);
                for (String module : classModules) {
                    System.out.println(module);
                }
            } else {
                System.out.println("Error: Module not found.");
            }
        }



        private void closeConnection(BufferedReader reader, PrintWriter writer, Socket socket) {
            try {
                reader.close();
                writer.close();
                socket.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    static class IncorrectActionException extends Exception {
        public IncorrectActionException(String message) {
            super(message);
        }
    }
}
